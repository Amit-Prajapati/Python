#fileName=ops-ebs-snapshots-delete-invoke.py
#ops-delete-ebs-snaps
#Invoke function to delete individual snapshots.
#Python 2.7
#Author: Amit Prajapati
#Note: Do not remove any comments and all commands in comment are specified for future troubleshooting

import boto3
import time
import datetime
import os
import sys
from random import randint

notificationARN        = os.getenv('SNS_TOPIC', '')
queueURL               = os.getenv('SQS_URL', '')
accountName            = os.getenv('ACCOUNT_NAME', 'NOT_SET')
retentionPeriod        = os.getenv('RETENTION_PERIOD', 35)
retentionPeriodNonProd = os.getenv('RETENTION_NON_PROD_PERIOD', 2)
regionFromSQSURL       = queueURL.split(".")[1]
ec2                    = boto3.resource('ec2')
client                 = boto3.client('ec2')
client_lambda          = boto3.client('lambda')
sns                    = boto3.resource('sns')
snsclient              = boto3.client('sns')
sqsclient              = boto3.client('sqs', region_name=regionFromSQSURL)
boto_session           = boto3.session.Session()
current_region         = boto_session.region_name

'''
    Posts a new message to a SQS queue which will be
    further used for digest notifications
'''


def postToSQSQueue(message, details, status, retentionDays):
    return sqsclient.send_message(
        QueueUrl=queueURL,
        MessageBody=message,
        MessageAttributes={
            'Topic': {
                'StringValue': 'Backup',
                'DataType': 'String'
            },
            'SubTopic': {
                'StringValue': 'Snapshots deleted (' + str(retentionDays) + ' days passed)',
                'DataType': 'String'
            },
            'Status': {
                'StringValue': status,
                'DataType': 'String'
            },
            'Details': {
                'StringValue': details,
                'DataType': 'String'
            },
            'Account': {
                'StringValue': accountName,
                'DataType': 'String'    
            }
        }
    )

def deleteSnapshot(snapId, retention):
    time.sleep(randint(2,20))
    max_retries = 10
    iteration = 1
    lastError = ''
    while max_retries >= iteration:
        try:
            client.delete_snapshot(SnapshotId=snapId)
            print "Deleted snapshot %s" % snapId
            return True
        except Exception as whatsWrong:
            iteration += 1
            lastError = str(whatsWrong)
            if 'InvalidSnapshot.InUse'.lower() in str(whatsWrong).lower() or 'InvalidSnapshot.NotFound'.lower() in str(whatsWrong).lower():
                print 'Snapshot is in use or not found!'
                return False
            if 'RequestLimitExceeded'.lower() in str(whatsWrong).lower():
                time.sleep(randint(3 * iteration, 6 * iteration))
            else:
                print('unexpected error in snapshot deletion, sending notification')
                postToSQSQueue("Error", str(whatsWrong), "Error", retention)
                return False
    if max_retries <= iteration:
        print "Was not able to delete the snapshot, exiting !"
        postToSQSQueue("Error", lastError, "Error", retention)
    return False
        

#Lambda main function
def lambda_handler(event, context):
    for snap_info in event["Snapshots"]:
        snap = snap_info["snapID"]
        if deleteSnapshot(snap, snap_info['retention']):
            postToSQSQueue("OK", snap, "OK", snap_info['retention'])
