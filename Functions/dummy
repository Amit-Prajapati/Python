#!/usr/bin/python
# ops-scheduled-events.py
# =============================================================================
# title           : ops-scheduled-events/index.py
# description     : Lambda function to find scheduled-events instance list.
# author          : Amit Prajapati (502712302)
# orig revision   : 2017-07-11
# version         : 1.0
# usage           : To perform any maintenance activity and aware of downtime.
# notes           :
# python_version  : 2.7.10
# ==============================================================================

import boto3
import logging
import os
import json

logging.basicConfig()
log = logging.getLogger()
log.setLevel(logging.INFO)

logging.getLogger('boto3').setLevel(logging.ERROR)

client = boto3.client('ec2')
sqsclient = boto3.client('sqs', region_name='us-east-1')
boto_session = boto3.session.Session()
current_region = boto_session.region_name
accountName = os.getenv('ACCOUNT_NAME', '')
queueURL = os.getenv('SQS_URL', '')


# Lambda main function

def lambda_handler(event, context):
    if event == None:
        log.debug('We are executing local ....')

    response = \
        client.describe_instance_status(Filters=[{'Name': 'event.code',
                                                  'Values': ['instance-reboot', 'system-reboot',
                                                             'system-maintenance', 'instance-stop',
                                                             'instance-retirement'
                                                             ]}])

    json_data = []
    for i in response['InstanceStatuses']:
        data = {}
        data['InstanceID'] = i['InstanceId']
        data['InstanceState'] = i['InstanceState']['Name']
        instanceState = data['InstanceState']
        for event in i['Events']:
            data['Event_Code'] = event['Code']
            data['Event_Description'] = event['Description']
            json_data.append(data)
        if 'Completed'.lower() not in str(data['Event_Description']).lower():
            postToSQSQueue("Scheduled Events", "InstanceID " + data['InstanceID'] , " Event_Code " + data['Event_Code'])
    log.info(json_data)

'''
    Posts a new message to a SQS queue which will be further used for digest notifications
'''


def postToSQSQueue(message, details, status):
    return sqsclient.send_message(
        QueueUrl=queueURL,
        MessageBody=message,
        MessageAttributes={
            'Topic': {
                'StringValue': 'Scheduled_Events',
                'DataType': 'String'
            },
            'Status': {
                'StringValue': status,
                'DataType': 'String'
            },
            'Details': {
                'StringValue': details,
                'DataType': 'String'
            },
            'Account': {
                'StringValue': accountName,
                'DataType': 'String'
            }
        }
    )


# for local testing

if __name__ == '__main__':
    logging.basicConfig()
    lambda_handler(None, None)
