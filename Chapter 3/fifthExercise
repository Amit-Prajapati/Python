>>P.S - 
Write a script that does the following:

Takes a port_number as its only argument.
Calls out to lsof to determine if there is a process listening on that port.
If there is a process, kill the process and inform the user.
If there is no process, print that there was no process running on that port.
Python's standard library comes with an HTTP server that you can use to start a server listening on a port (5500 in this case) with this line:

$ python -m SimpleHTTPServer 5500
Use a separate terminal window/tab to test our your script to kill that process.

Hints:

You may need to install lsof. Use this command:

$ sudo yum install -y lsof
Use this line of lsof to get the port information:

lsof -n -i4TCP:PORT_NUMBER
That will return multiple lines, and line you’ll want will contain “LISTEN”.

Use the string split() method to break a string into a list of its words.
You can either use the kill command outside of Python or the os.kill(pid, 9) function.
------------------------------------------------------------------------------------------------------------------------------------------
chapter3 $ cat fifthExercise.py
#!/usr/local/bin/python

import os
import argparse
import subprocess

parser = argparse.ArgumentParser()
parser.add_argument("port_no", type=int, help="Enter a port number")

port = parser.parse_args().port_no
print("User wants to kill process running on port %s" % port)

try:
    output = subprocess.check_output(['lsof', '-n', "-i4TCP:%s" % port])
except subprocess.CalledProcessError:
    print("No process running on %s port" % port)
else:
    listening = None

    for line in output.splitlines():
        if "LISTEN" in line:
            listening = line
            break

    if listening:
        # PID is the second column in the output
        pid = int(listening.split()[1])
        os.kill(pid, 9)
        print("Killed process: %s" % pid)
    else:
        print("No process listening on %s port" % port)
------------------------------------------------------------------------------------------------------------------------------------------

>>Ouput -
chapter3 $ ./fifthExercise.py 5500
User wants to kill process running on port 5500
Killed process: 17565

>>Notes - 
output.splitlines(): to split the lines of a string

subprocess.call(): will return int object
subprocess.check_output(): return its output as a byte string.
If the return code was non-zero it raises a CalledProcessError.
 The CalledProcessError object will have the return code in the returncode attribute and any output in the output attribute.
