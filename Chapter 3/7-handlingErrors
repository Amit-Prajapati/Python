Handling Errors with try/except/else/finally :--

Situation when we have to handle an error -
bin $ ./reverse-file.py fake.txt
Filename: amit.txt
Traceback (most recent call last):
  File "./reverse-file.py", line 14, in <module>
    with open(args.filename) as f:
IOError: [Errno 2] No such file or directory: 'fake.txt'

P.S - Handling Errors
---------------------------------------------------------------------------------------------------------------------------------------
bin $ cat reverse-file.py
#!/usr/local/bin/python

import argparse

parser = argparse.ArgumentParser(description='Read a file in reverse')
parser.add_argument('filename', help='the file to read')
parser.add_argument('--limit', '-l', type=int, help='the number of lines to read')
parser.add_argument('--version', '-v', action='version', version='%(prog)s 1.0')

args = parser.parse_args()

print("Filename: %s" % args.filename)

try:
    f = open(args.filename)
except IOError as err:
    print("Error: File not found")
else:
    with f:
        limit = args.limit
        lines = f.readlines()
        lines.reverse()
    if args.limit:
        lines = lines[:limit]

    for line in lines:
        print(line.strip()[::-1])
finally:
    print("Script is finished.")
---------------------------------------------------------------------------------------------------------------------------------------

Output - 
bin $ ./reverse-file.py fake.txt
Filename: fake.txt
Error: File not found
Script is finished.
