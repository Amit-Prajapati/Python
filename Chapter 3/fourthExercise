>>P.S -
Write a script that does the following:

Receives a file_name and line_number as command line parameters.
Prints the specified line_number from file_name to the screen. The user will specify this as you would expect, not using zero as the first line.
Make sure that you handle the following error cases by presenting the user with a useful message:

The file doesn’t exist.
The file doesn’t contain the line_number specified (file is too short).

Possible solution 1:
--------------------------------------------------------------------------------------------------------------------------------------
#!/usr/local/bin/python

def get_file_name(reprompt = False):
    if reprompt:
        print("Enter a file name")

    file_name = raw_input("Destination file name: ").strip()
    return(file_name) or get_file_name(True)

def get_line_no(reprompt = False):
    if reprompt:
        print("Select a line from %s" % file_name)

    line_no = raw_input("Enter a line number: ").strip()
    return(line_no) or get_line_no(True)

file_name = get_file_name()
line_no = get_line_no()

print("User has selected line no %s from %s file" % (int(line_no), file_name))

try:
    lines = open(file_name).readlines()
    line = lines[int(line_no) - 1]
except IndexError as err:
    print("Index Error: %s" % err)
except IOError:
    print("Error: File does not exist.")
else:
    print(line)
--------------------------------------------------------------------------------------------------------------------------------------
>>Output -
chapter3 $ ./fourthExercise.py
Destination file name: absajh
Enter a line number: 2
User has selected line no 2 from absajh file
Error: File does not exist.
chapter3 $
--------------------------------------------------------------------------------------------------------------------------------------

Possible solution 2:
--------------------------------------------------------------------------------------------------------------------------------------
#!/usr/local/bin/python

import argparse

parser = argparse.ArgumentParser() #constructor
parser.add_argument("file_name", help="file to read")
parser.add_argument("line_no", type=int, help="line to print from the file")

args = parser.parse_args()
print("User has selected %s line from %s file" % (args.line_no, args.file_name))

try:
    lines = open(args.file_name, "r").readlines()
    line = lines[args.line_no - 1]
except IndexError:
    print("Error: file %s does not have line %s" % (args.file_name, args.line_no))
except IOError as err:
    print("IO Error:%s" % err)
else:
    print(line)
--------------------------------------------------------------------------------------------------------------------------------------
>>Output -
chapter3 $ ./fourthExercise-sample.py fourthExercise-sample.py 13
User has selected line no 13 from fourthExercise-sample.py file
    lines = open(args.file_name, "r").readlines()

chapter3 $
